"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("defeaters"),ApplicationConfiguration.registerModule("evidences"),ApplicationConfiguration.registerModule("evidencetypes"),ApplicationConfiguration.registerModule("judgements"),ApplicationConfiguration.registerModule("projects"),ApplicationConfiguration.registerModule("propcreators"),ApplicationConfiguration.registerModule("propositions"),ApplicationConfiguration.registerModule("things"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus","ProjectFactory",function($scope,$state,Authentication,Menus,ProjectFactory){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.projectIsSet=function(){return""!==ProjectFactory.getProjId()}}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("defeaters").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Defeaters",state:"defeaters",position:3,type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","defeaters",{title:"List Defeaters",state:"defeaters.list"}),Menus.addSubMenuItem("topbar","defeaters",{title:"Create Defeaters",state:"defeaters.create"})}]),angular.module("defeaters").config(["$stateProvider",function($stateProvider){$stateProvider.state("defeaters",{"abstract":!0,url:"/defeaters",template:"<ui-view/>"}).state("defeaters.list",{url:"",templateUrl:"modules/defeaters/client/views/list-defeater.client.view.html"}).state("defeaters.create",{url:"/create",templateUrl:"modules/defeaters/client/views/create-defeater.client.view.html"}).state("defeaters.view",{url:"/:defeaterId",templateUrl:"modules/defeaters/client/views/view-defeater.client.view.html"}).state("defeaters.edit",{url:"/:defeaterId/edit",templateUrl:"modules/defeaters/client/views/edit-defeater.client.view.html"})}]),angular.module("defeaters").controller("DefeatersController",["$scope","$stateParams","$location","Authentication","Defeaters",function($scope,$stateParams,$location,Authentication,Defeaters){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","defeaterForm"),!1;var defeater=new Defeaters({title:this.title,content:this.content});defeater.$save(function(response){$location.path("defeaters/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(defeater){if(defeater){defeater.$remove();for(var i in $scope.defeater)$scope.defeaters[i]===defeater&&$scope.defeaters.splice(i,1)}else $scope.defeater.$remove(function(){$location.path("defeaters")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","defeaterForm"),!1;var defeater=$scope.defeater;defeater.$update(function(){$location.path("defeaters/"+defeater._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.defeaters=Defeaters.query()},$scope.findOne=function(){$scope.defeater=Defeaters.get({defeaterId:$stateParams.defeaterId})}}]),angular.module("defeaters").factory("Defeaters",["$resource",function($resource){return $resource("api/defeaters/:defeaterId",{defeaterId:"@_id"},{update:{method:"PUT"}})}]),angular.module("evidences").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Evidences",state:"evidences",position:3,type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","evidences",{title:"List Evidences",state:"evidences.list"}),Menus.addSubMenuItem("topbar","evidences",{title:"Create Evidence",state:"evidences.create"})}]),angular.module("evidences").config(["$stateProvider",function($stateProvider){$stateProvider.state("evidences",{"abstract":!0,url:"/evidences",template:"<ui-view/>"}).state("evidences.list",{url:"",templateUrl:"modules/evidences/client/views/list-evidences.client.view.html"}).state("evidences.create",{url:"/create",templateUrl:"modules/evidences/client/views/create-evidence.client.view.html"}).state("evidences.view",{url:"/:evidenceId",templateUrl:"modules/evidences/client/views/view-evidence.client.view.html"}).state("evidences.edit",{url:"/:evidenceId/edit",templateUrl:"modules/evidences/client/views/edit-evidence.client.view.html"})}]),angular.module("evidences").controller("EvidencesController",["$scope","$stateParams","$location","Authentication","EvidenceFactory","ProjectFactory",function($scope,$stateParams,$location,Authentication,EvidenceFactory,ProjectFactory){$scope.authentication=Authentication,$scope.projectId=ProjectFactory.getProjId(),$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","evidenceForm"),!1;var evidence=new EvidenceFactory.evidence({title:this.title,content:this.content,project:ProjectFactory.getProjId()});evidence.$save(function(response){$location.path("evidences/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(evidence){if(evidence){evidence.$remove();for(var i in $scope.evidences)$scope.evidences[i]===evidence&&$scope.evidences.splice(i,1)}else $scope.evidence.$remove(function(){$location.path("evidences")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","evidenceForm"),!1;var evidence=$scope.evidence;evidence.$update(function(){$location.path("evidences/"+evidence._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.evidences=EvidenceFactory.project.query({projectId:ProjectFactory.getProjId()})},$scope.findOne=function(){$scope.evidence=EvidenceFactory.evidence.get({evidenceId:$stateParams.evidenceId},function(){})}}]),angular.module("evidences").factory("EvidenceFactory",["$resource",function($resource){return{evidence:$resource("api/evidences/:evidenceId",{evidenceId:"@_id"},{update:{method:"PUT"}}),project:$resource("api/evidences/project/:projectId",{projectId:"@_id"})}}]),angular.module("evidencetypes").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Evidence Types",state:"evidencetypes",position:0,type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","evidencetypes",{title:"List Evidence Types",state:"evidencetypes.list"}),Menus.addSubMenuItem("topbar","evidencetypes",{title:"Create Evidence Types",state:"evidencetypes.create"})}]),angular.module("evidencetypes").config(["$stateProvider",function($stateProvider){$stateProvider.state("evidencetypes",{"abstract":!0,url:"/evidencetypes",template:"<ui-view/>"}).state("evidencetypes.list",{url:"",templateUrl:"modules/evidencetypes/client/views/list-evidencetypes.client.view.html"}).state("evidencetypes.create",{url:"/create",templateUrl:"modules/evidencetypes/client/views/create-evidencetype.client.view.html"}).state("evidencetypes.view",{url:"/:evidencetypeId",templateUrl:"modules/evidencetypes/client/views/view-evidencetype.client.view.html"}).state("evidencetypes.edit",{url:"/:evidencetypeId/edit",templateUrl:"modules/evidencetypes/client/views/edit-evidencetype.client.view.html"})}]),angular.module("evidencetypes").controller("EvidencetypesController",["$scope","$stateParams","$location","Authentication","EvidencetypeFactory","ProjectFactory",function($scope,$stateParams,$location,Authentication,EvidencetypeFactory,ProjectFactory){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","evidencetypeForm"),!1;var evidencetype=new EvidencetypeFactory.evidencetype({title:this.title,content:this.content,project:ProjectFactory.getProjId()});evidencetype.$save(function(response){$location.path("evidencetypes/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(evidencetype){if(evidencetype){evidencetype.$remove();for(var i in $scope.evidencetype)$scope.evidencetypes[i]===evidencetype&&$scope.evidencetypes.splice(i,1)}else $scope.evidencetype.$remove(function(){$location.path("evidencetypes")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","evidencetypeForm"),!1;var evidencetype=$scope.evidencetype;evidencetype.$update(function(){$location.path("evidencetypes/"+evidencetype._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.evidencetypes=EvidencetypeFactory.project.query({projectId:ProjectFactory.getProjId()},function(){})},$scope.findOne=function(){$scope.evidencetype=EvidencetypeFactory.evidencetype.get({evidencetypeId:$stateParams.evidencetypeId})}}]),angular.module("evidencetypes").factory("EvidencetypeFactory",["$resource",function($resource){return{evidencetype:$resource("api/evidencetypes/:evidencetypeId",{evidencetypeId:"@_id"},{update:{method:"PUT"}}),project:$resource("api/evidencetypes/project/:projectId",{projectID:"@_id"})}}]),angular.module("judgements").config(["$stateProvider",function($stateProvider){$stateProvider.state("judgements",{"abstract":!0,url:"/judgements",template:"<ui-view/>"}).state("judgements.list",{url:"",templateUrl:"modules/judgements/client/views/list-judgement.client.view.html"}).state("judgements.create",{url:"/create",templateUrl:"modules/judgements/client/views/create-judgement.client.view.html"}).state("judgements.view",{url:"/:judgementId",templateUrl:"modules/judgements/client/views/view-judgement.client.view.html"}).state("judgements.edit",{url:"/:judgementId/edit",templateUrl:"modules/judgements/client/views/edit-judgement.client.view.html"})}]),angular.module("judgements").controller("JudgementsController",["$scope","$stateParams","$location","Authentication","JudgementFactory","ProjectFactory",function($scope,$stateParams,$location,Authentication,JudgementFactory,ProjectFactory){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","judgementForm"),!1;var judgement=new JudgementFactory.judgement({title:this.title,content:this.content,project:ProjectFactory.getProjId()});judgement.$save(function(response){$location.path("judgements/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","judgementForm"),!1;var judgement=$scope.judgement;judgement.$update(function(){$location.path("things/"+judgement._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.judgements=JudgementFactory.project.query({project:ProjectFactory.getProjId()})},$scope.findOne=function(){$scope.judgement=JudgementFactory.judgement.get({judgementId:$stateParams.judgementId})}}]),angular.module("judgements").factory("JudgementFactory",["$resource",function($resource){return{judgement:$resource("api/judgements/:judgementId",{judgementId:"@_id"},{update:{method:"PUT"}}),project:$resource("api/judgements/project/:projectId",{projectId:"@_id"})}}]),angular.module("projects").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Projects",state:"projects",position:0,type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","projects",{title:"List Projects",state:"projects.list"}),Menus.addSubMenuItem("topbar","projects",{title:"Create Projects",state:"projects.create"})}]),angular.module("projects").config(["$stateProvider",function($stateProvider){$stateProvider.state("projects",{"abstract":!0,url:"/projects",template:"<ui-view/>"}).state("projects.list",{url:"",templateUrl:"modules/projects/client/views/list-project.client.view.html"}).state("projects.create",{url:"/create",templateUrl:"modules/projects/client/views/create-project.client.view.html"}).state("projects.view",{url:"/:projId",templateUrl:"modules/projects/client/views/view-project.client.view.html"}).state("projects.edit",{url:"/:projId/edit",templateUrl:"modules/projects/client/views/edit-project.client.view.html"})}]),angular.module("projects").controller("ProjectsController",["$scope","$stateParams","$location","Authentication","ProjectFactory",function($scope,$stateParams,$location,Authentication,ProjectFactory){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","proejctForm"),!1;var project=new ProjectFactory.project({title:this.title,content:this.content});project.$save(function(response){$location.path("projects/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(project){if(project){project.$remove();for(var i in $scope.project)$scope.projects[i]===project&&$scope.projects.splice(i,1)}else $scope.project.$remove(function(){ProjectFactory.setCurProject({}),ProjectFactory.setProjId(""),$location.path("projects")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","projectForm"),!1;var project=$scope.project;project.$update(function(){$location.path("projects/"+project._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.projects=ProjectFactory.project.query()},$scope.findOne=function(){$scope.project=ProjectFactory.project.get({projId:$stateParams.projId},function(){ProjectFactory.setCurProject($scope.project),ProjectFactory.setProjId($scope.project._id)})}}]),angular.module("projects").factory("ProjectFactory",["$resource",function($resource){var curProject={},projectId="",setProjIdFunc=function(pId){projectId=pId},getProjIdFunc=function(){return projectId},setCurProjectFunc=function(proj){curProject=proj},getCurProjectFunc=function(){return curProject};return{setProjId:setProjIdFunc,getProjId:getProjIdFunc,setCurProject:setCurProjectFunc,getCurProject:getCurProjectFunc,project:$resource("api/projects/:projId",{projId:"@_id"},{update:{method:"PUT"}})}}]),angular.module("propcreators").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Creators",state:"propcreators",position:1,type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","propcreators",{title:"List Creators",state:"propcreators.list"}),Menus.addSubMenuItem("topbar","propcreators",{title:"New Creator",state:"propcreators.create"})}]),angular.module("propcreators").config(["$stateProvider",function($stateProvider){$stateProvider.state("propcreators",{"abstract":!0,url:"/propcreators",template:"<ui-view/>"}).state("propcreators.list",{url:"",templateUrl:"modules/propcreators/client/views/list-propcreator.client.view.html"}).state("propcreators.create",{url:"/create",templateUrl:"modules/propcreators/client/views/create-propcreator.client.view.html"}).state("propcreators.view",{url:"/:propCId",templateUrl:"modules/propcreators/client/views/view-propcreator.client.view.html"}).state("propcreators.edit",{url:"/:propCId/edit",templateUrl:"modules/propcreators/client/views/edit-propcreator.client.view.html"})}]),angular.module("propcreators").controller("PropcreatorsController",["$scope","$stateParams","$location","Authentication","PropcreatorFactory","ProjectFactory",function($scope,$stateParams,$location,Authentication,PropcreatorFactory,ProjectFactory){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","propCreatorForm"),!1;var propCreator=new PropcreatorFactory.creator({title:this.title,project:ProjectFactory.getProjId()});propCreator.$save(function(response){$location.path("propcreators/"+response._id),$scope.title=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(propCreator){if(propCreator){propCreator.$remove();for(var i in $scope.propCreators)$scope.propCreators[i]===propCreator&&$scope.propCreators.splice(i,1)}else $scope.propCreator.$remove(function(){$location.path("propcreators")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","propCreatorForm"),!1;var propCreator=$scope.propCreator;propCreator.$update(function(){$location.path("propcreators/"+propCreator._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.propCreators=PropcreatorFactory.project.query({projectId:ProjectFactory.getProjId()})},$scope.findOne=function(){$scope.propCreator=PropcreatorFactory.creator.get({propCId:$stateParams.propCId})}}]),angular.module("propcreators").factory("PropcreatorFactory",["$resource",function($resource){return{creator:$resource("api/propcreators/:propCId",{propCId:"@_id"},{update:{method:"PUT"}}),project:$resource("api/propcreators/project/:projectId",{projectId:"@_id"})}}]),angular.module("propositions").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Propositions",state:"propositions",position:0,type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","propositions",{title:"List Propositions",state:"propositions.list"}),Menus.addSubMenuItem("topbar","propositions",{title:"Create Propositions",state:"propositions.create"})}]),angular.module("propositions").config(["$stateProvider",function($stateProvider){$stateProvider.state("propositions",{"abstract":!0,url:"/propositions",template:"<ui-view/>"}).state("propositions.list",{url:"",templateUrl:"modules/propositions/client/views/list-proposition.client.view.html"}).state("propositions.create",{url:"/create",templateUrl:"modules/propositions/client/views/create-proposition.client.view.html"}).state("propositions.view",{url:"/:propositionId",templateUrl:"modules/propositions/client/views/view-proposition.client.view.html"}).state("propositions.edit",{url:"/:propositionId/edit",templateUrl:"modules/propositions/client/views/edit-proposition.client.view.html"})}]),angular.module("propositions").controller("PropositionsController",["$scope","$stateParams","$location","Authentication","ProjectFactory","PropositionFactory","ThingFactory","PropcreatorFactory","EvidenceFactory","JudgementFactory",function($scope,$stateParams,$location,Authentication,ProjectFactory,PropositionFactory,ThingFactory,PropcreatorFactory,EvidenceFactory,JudgementFactory){$scope.authentication=Authentication,$scope.projectId=ProjectFactory.getProjId(),$scope.things=ThingFactory.project.query({projectId:$scope.projectId}),$scope.creators=PropcreatorFactory.project.query({projectId:$scope.projectId}),$scope.judgements=JudgementFactory.project.query({projectId:$scope.projectId}),$scope.evidences=EvidenceFactory.project.query({projectId:$scope.projectId}),$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","propositionForm"),!1;var proposition=new PropositionFactory.proposition({title:this.title,thing:this.selectedThing._id,project:$scope.projectId,propcreator:this.selectedCreator._id,evidences:this.selectedEvidences._id,judgements:this.selectedThing._id});proposition.$save(function(response){$location.path("propositions/"+response._id),$scope.title=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(proposition){if(proposition){proposition.$remove();for(var i in $scope.proposition)$scope.propositions[i]===proposition&&$scope.propositions.splice(i,1)}else $scope.proposition.$remove(function(){$location.path("propositions")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","propositionForm"),!1;var proposition=$scope.proposition;proposition.thing=$scope.selectedThing._id,proposition.propcreator=$scope.selectedCreator._id,proposition.evidences=$scope.selectedEvidences._id,proposition.judgements=$scope.selectedJudgements._id;proposition.$update(function(){$location.path("propositions/"+proposition._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.propositions=PropositionFactory.project.query({projectId:$scope.projectId})},$scope.findOne=function(){$scope.proposition=PropositionFactory.proposition.get({propositionId:$stateParams.propositionId},function(resData){})}}]),angular.module("propositions").factory("PropositionFactory",["$resource",function($resource){return{proposition:$resource("api/propositions/:propositionId",{propositionId:"@_id"},{update:{method:"PUT"}}),project:$resource("api/propositions/project/:projectId",{projectId:"@_id"})}}]),angular.module("things").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Things",state:"things",position:0,type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","things",{title:"List Things",state:"things.list"}),Menus.addSubMenuItem("topbar","things",{title:"Create Things",state:"things.create"})}]),angular.module("things").config(["$stateProvider",function($stateProvider){$stateProvider.state("things",{"abstract":!0,url:"/things",template:"<ui-view/>"}).state("things.list",{url:"",templateUrl:"modules/things/client/views/list-thing.client.view.html"}).state("things.create",{url:"/create",templateUrl:"modules/things/client/views/create-thing.client.view.html"}).state("things.view",{url:"/:thingId",templateUrl:"modules/things/client/views/view-thing.client.view.html"}).state("things.edit",{url:"/:thingId/edit",templateUrl:"modules/things/client/views/edit-thing.client.view.html"})}]),angular.module("things").controller("ThingsController",["$scope","$stateParams","$location","Authentication","ThingFactory","ProjectFactory",function($scope,$stateParams,$location,Authentication,ThingFactory,ProjectFactory){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","thingForm"),!1;var thing=new ThingFactory.thing({title:this.title,content:this.content,project:ProjectFactory.getProjId()});thing.$save(function(response){$location.path("things/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(thing){if(thing){thing.$remove();for(var i in $scope.thing)$scope.things[i]===thing&&$scope.things.splice(i,1)}else $scope.thing.$remove(function(){$location.path("things")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","thingForm"),!1;var thing=$scope.thing;thing.$update(function(){$location.path("things/"+thing._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){
$scope.things=ThingFactory.project.query({projectId:ProjectFactory.getProjId()},function(){})},$scope.findOne=function(){$scope.thing=ThingFactory.thing.get({thingId:$stateParams.thingId})}}]),angular.module("things").factory("ThingFactory",["$resource",function($resource){return{thing:$resource("api/things/:thingId",{thingId:"@_id"},{update:{method:"PUT"}}),project:$resource("api/things/project/:projectId",{projectID:"@_id"})}}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return owaspPasswordStrengthTest.config({allowPassphrases:!0,maxLength:128,minLength:3,minPhraseLength:0,minOptionalTestsToPass:0}),{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return console.log("password test result:"+result),result},getPopoverMsg:function(){var popoverMsg="Please enter a password with greater than 3 characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);